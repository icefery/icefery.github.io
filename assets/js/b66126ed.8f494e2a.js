"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5310],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),u=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(o.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(t),d=a,h=c["".concat(o,".").concat(d)]||c[d]||m[d]||i;return t?r.createElement(h,l(l({ref:n},p),{},{components:t})):r.createElement(h,l({ref:n},p))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=d;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[c]="string"==typeof e?e:a,l[1]=s;for(var u=2;u<i;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3139:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const i={},l="\u3010LeetCode\u3011\u521d\u7ea7\u7b97\u6cd5",s={unversionedId:"algorithm/\u3010LeetCode\u3011\u521d\u7ea7\u7b97\u6cd5",id:"algorithm/\u3010LeetCode\u3011\u521d\u7ea7\u7b97\u6cd5",title:"\u3010LeetCode\u3011\u521d\u7ea7\u7b97\u6cd5",description:"\u6570\u7ec4",source:"@site/docs/algorithm/\u3010LeetCode\u3011\u521d\u7ea7\u7b97\u6cd5.md",sourceDirName:"algorithm",slug:"/algorithm/\u3010LeetCode\u3011\u521d\u7ea7\u7b97\u6cd5",permalink:"/docs/algorithm/\u3010LeetCode\u3011\u521d\u7ea7\u7b97\u6cd5",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"\u7b97\u6cd5",permalink:"/docs/algorithm/"},next:{title:"\u3010LeetCode\u3011\u6ed1\u52a8\u7a97\u53e3",permalink:"/docs/algorithm/\u3010LeetCode\u3011\u6ed1\u52a8\u7a97\u53e3"}},o={},u=[{value:"\u6570\u7ec4",id:"\u6570\u7ec4",level:2},{value:"\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879",id:"\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879",level:3},{value:"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II",id:"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a-ii",level:3},{value:"\u65cb\u8f6c\u6570\u7ec4",id:"\u65cb\u8f6c\u6570\u7ec4",level:3},{value:"\u5b58\u5728\u91cd\u590d\u5143\u7d20",id:"\u5b58\u5728\u91cd\u590d\u5143\u7d20",level:3},{value:"\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57",id:"\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57",level:3},{value:"\u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6 II",id:"\u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6-ii",level:3},{value:"\u52a0\u4e00",id:"\u52a0\u4e00",level:3},{value:"\u79fb\u52a8\u96f6",id:"\u79fb\u52a8\u96f6",level:3},{value:"\u4e24\u6570\u4e4b\u548c",id:"\u4e24\u6570\u4e4b\u548c",level:3},{value:"\u6709\u6548\u7684\u6570\u72ec",id:"\u6709\u6548\u7684\u6570\u72ec",level:3},{value:"\u65cb\u8f6c\u56fe\u50cf",id:"\u65cb\u8f6c\u56fe\u50cf",level:3},{value:"\u5b57\u7b26\u4e32",id:"\u5b57\u7b26\u4e32",level:2},{value:"\u53cd\u8f6c\u5b57\u7b26\u4e32",id:"\u53cd\u8f6c\u5b57\u7b26\u4e32",level:3},{value:"\u6574\u6570\u53cd\u8f6c",id:"\u6574\u6570\u53cd\u8f6c",level:3},{value:"\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u552f\u4e00\u5b57\u7b26",id:"\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u552f\u4e00\u5b57\u7b26",level:3},{value:"\u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd",id:"\u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd",level:3},{value:"\u9a8c\u8bc1\u56de\u6587\u4e32",id:"\u9a8c\u8bc1\u56de\u6587\u4e32",level:3},{value:"\u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570",id:"\u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570",level:3},{value:"\u5b9e\u73b0<code>strStr()</code>",id:"\u5b9e\u73b0strstr",level:3},{value:"\u5916\u89c2\u6570\u5217",id:"\u5916\u89c2\u6570\u5217",level:3},{value:"\u6700\u957f\u516c\u5171\u524d\u7f00",id:"\u6700\u957f\u516c\u5171\u524d\u7f00",level:3},{value:"\u94fe\u8868",id:"\u94fe\u8868",level:2},{value:"\u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9",id:"\u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9",level:3},{value:"\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u8282\u70b9",id:"\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c-n-\u4e2a\u8282\u70b9",level:3},{value:"\u53cd\u8f6c\u94fe\u8868",id:"\u53cd\u8f6c\u94fe\u8868",level:3},{value:"\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868",id:"\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868",level:3},{value:"\u56de\u6587\u94fe\u8868",id:"\u56de\u6587\u94fe\u8868",level:3},{value:"\u73af\u5f62\u94fe\u8868",id:"\u73af\u5f62\u94fe\u8868",level:3},{value:"\u6811",id:"\u6811",level:2},{value:"\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6",id:"\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6",level:3},{value:"\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811",id:"\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811",level:3},{value:"\u5bf9\u79f0\u4e8c\u53c9\u6811",id:"\u5bf9\u79f0\u4e8c\u53c9\u6811",level:3},{value:"\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",id:"\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",level:3},{value:"\u5c06\u6709\u5e8f\u6570\u7ec4\u8f6c\u5316\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811",id:"\u5c06\u6709\u5e8f\u6570\u7ec4\u8f6c\u5316\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811",level:3},{value:"\u6392\u5e8f\u548c\u641c\u7d22",id:"\u6392\u5e8f\u548c\u641c\u7d22",level:2},{value:"\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4",id:"\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4",level:3},{value:"\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c",id:"\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c",level:3},{value:"\u52a8\u6001\u89c4\u5212",id:"\u52a8\u6001\u89c4\u5212",level:2},{value:"\u722c\u697c\u68af",id:"\u722c\u697c\u68af",level:3},{value:"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a",id:"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a",level:3},{value:"\u6700\u5927\u5b50\u5e8f\u548c",id:"\u6700\u5927\u5b50\u5e8f\u548c",level:3},{value:"\u6253\u5bb6\u52ab\u820d",id:"\u6253\u5bb6\u52ab\u820d",level:3},{value:"\u8bbe\u8ba1\u95ee\u9898",id:"\u8bbe\u8ba1\u95ee\u9898",level:2},{value:"\u6253\u4e71\u6570\u7ec4",id:"\u6253\u4e71\u6570\u7ec4",level:3},{value:"\u6700\u5c0f\u6808",id:"\u6700\u5c0f\u6808",level:3},{value:"\u6570\u5b66",id:"\u6570\u5b66",level:2},{value:"Fizz Buzz",id:"fizz-buzz",level:3},{value:"\u8ba1\u6570\u8d28\u6570",id:"\u8ba1\u6570\u8d28\u6570",level:3},{value:"3 \u7684\u5e42",id:"3-\u7684\u5e42",level:3},{value:"\u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570",id:"\u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570",level:3},{value:"\u4f4d 1 \u7684\u4e2a\u6570",id:"\u4f4d-1-\u7684\u4e2a\u6570",level:3},{value:"\u5176\u5b83",id:"\u5176\u5b83",level:2},{value:"\u6c49\u660e\u8ddd\u79bb",id:"\u6c49\u660e\u8ddd\u79bb",level:3},{value:"\u98a0\u5012\u4e8c\u8fdb\u5236\u4f4d",id:"\u98a0\u5012\u4e8c\u8fdb\u5236\u4f4d",level:3},{value:"\u6768\u8f89\u4e09\u89d2",id:"\u6768\u8f89\u4e09\u89d2",level:3},{value:"\u6709\u6548\u7684\u62ec\u53f7",id:"\u6709\u6548\u7684\u62ec\u53f7",level:3},{value:"\u7f3a\u5931\u6570\u5b57",id:"\u7f3a\u5931\u6570\u5b57",level:3}],p={toc:u};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"leetcode\u521d\u7ea7\u7b97\u6cd5"},"\u3010LeetCode\u3011\u521d\u7ea7\u7b97\u6cd5"),(0,a.kt)("h2",{id:"\u6570\u7ec4"},"\u6570\u7ec4"),(0,a.kt)("h3",{id:"\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/"},"\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public int removeDuplicates(int[] nums) {\n    if (nums.length == 0) {\n        return 0;\n    }\n    int fast = 1;\n    int slow = 1;\n    while (fast < nums.length) {\n        if (nums[fast] != nums[fast - 1]) {\n            nums[slow] = nums[fast];\n            slow++;\n        }\n        fast++;\n    }\n    return slow;\n}\n")),(0,a.kt)("h3",{id:"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a-ii"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/"},"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public int maxProfit(int[] prices) {\n    int ans = 0;\n    int n = prices.length;\n    for (int i = 1; i < n; i++) {\n        ans += Math.max(0, prices[i] - prices[i - 1]);\n    }\n    return ans;\n}\n")),(0,a.kt)("h3",{id:"\u65cb\u8f6c\u6570\u7ec4"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/rotate-array/"},"\u65cb\u8f6c\u6570\u7ec4")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public void rotate(int[] nums, int k) {\n    k %= nums.length;\n    // [0, n-1]\n    for (int i=0, j=nums.length-1; i < j; i++, j--) {\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n    // [0, k-1]\n    for (int i=0, j=k-1; i < j; i++, j--) {\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n    // [k, n-1]\n    for (int i=k, j=nums.length-1; i < j; i++, j--) {\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n}\n")),(0,a.kt)("h3",{id:"\u5b58\u5728\u91cd\u590d\u5143\u7d20"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/contains-duplicate/"},"\u5b58\u5728\u91cd\u590d\u5143\u7d20")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public boolean containsDuplicate(int[] nums) {\n    Set<Integer> set = new HashSet<>();\n    for (int x : nums) {\n        if (!set.add(x)) {\n            return true;\n        }\n    }\n    return false;\n}\n")),(0,a.kt)("h3",{id:"\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/single-number/"},"\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u4efb\u4f55\u6570\u548c 0 \u505a\u5f02\u6216\u8fd0\u7b97\uff0c\u7ed3\u679c\u4ecd\u7136\u662f\u539f\u6765\u7684\u6570"),(0,a.kt)("li",{parentName:"ul"},"\u4efb\u4f55\u6570\u548c\u5176\u81ea\u8eab\u505a\u5f02\u6216\u8fd0\u7b97\uff0c\u7ed3\u679c\u662f 0"),(0,a.kt)("li",{parentName:"ul"},"\u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public int singleNumber(int[] nums) {\n    int single = 0;\n    for (int num : nums) {\n        single ^= num;\n    }\n    return single;\n}\n")),(0,a.kt)("h3",{id:"\u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6-ii"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/intersection-of-two-arrays-ii/"},"\u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6 II")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public int[] intersect(int[] nums1, int[] nums2) {\n    if (nums1.length > nums2.length) {\n        return intersect(nums2, nums1);\n    }\n    Map<Integer, Integer> map = new HashMap<>();\n    for (int num : nums1) {\n        int count = map.getOrDefault(num, 0) + 1;\n        map.put(num, count);\n    }\n    int[] intersection = new int[nums1.length];\n    int index = 0;\n    for (int num : nums2) {\n        int count = map.getOrDefault(num, 0);\n        if (count > 0) {\n            intersection[index] = num;\n            count--;\n            index++;\n            if (count > 0) {\n                map.put(num, count);\n            } else {\n                map.remove(num);\n            }\n        }\n    }\n    return Arrays.copyOfRange(intersection, 0, index);\n}\n")),(0,a.kt)("h3",{id:"\u52a0\u4e00"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/plus-one/"},"\u52a0\u4e00")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public int[] plusOne(int[] digits) {\n    for (int i = digits.length - 1; i >= 0; i--) {\n        if (digits[i] != 9) {\n            digits[i]++;\n            for (int j = i + 1; j < digits.length; j++) {\n                digits[j] = 0;\n            }\n            return digits;\n        }\n    }\n    int[] ans = new int[digits.length + 1];\n    ans[0] = 1;\n    return ans;\n}\n")),(0,a.kt)("h3",{id:"\u79fb\u52a8\u96f6"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/move-zeroes/"},"\u79fb\u52a8\u96f6")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public void moveZeroes(int[] nums) {\n    int left = 0;\n    int right = 0;\n    while (right < nums.length) {\n        if (nums[right] != 0) {\n            int temp = nums[left];\n            nums[left] = nums[right];\n            nums[right] = temp;\n            left++;\n        }\n        right++;\n    }\n}\n")),(0,a.kt)("h3",{id:"\u4e24\u6570\u4e4b\u548c"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/two-sum/"},"\u4e24\u6570\u4e4b\u548c")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public int[] twoSum(int[] nums, int target) {\n    Map<Integer, Integer> map = new HashMap<>();\n    for (int i = 0; i < nums.length; i++) {\n        if (map.containsKey(target - nums[i])) {\n            return new int[]{map.get(target - nums[i]), i};\n        }\n        map.put(nums[i], i);\n    }\n    return new int[0];\n}\n")),(0,a.kt)("h3",{id:"\u6709\u6548\u7684\u6570\u72ec"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/valid-sudoku/"},"\u6709\u6548\u7684\u6570\u72ec")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public boolean isValidSudoku(char[][] board) {\n    int[][] rows = new int[9][9];\n    int[][] cols = new int[9][9];\n    int[][][] subboxes = new int[3][3][9];\n    for (int i = 0; i < 9; i++) {\n        for (int j = 0; j < 9; j++) {\n            char c = board[i][j];\n            if (c != '.') {\n                int index = c - '0' - 1;\n                rows[i][index]++;\n                cols[j][index]++;\n                subboxes[i / 3][j / 3][index]++;\n                if (rows[i][index] > 1 || cols[j][index] > 1 || subboxes[i / 3][j / 3][index] > 1) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\n")),(0,a.kt)("h3",{id:"\u65cb\u8f6c\u56fe\u50cf"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/rotate-image/"},"\u65cb\u8f6c\u56fe\u50cf")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public void rotate(int[][] matrix) {\n    int n = matrix.length;\n    for (int i = 0; i < n / 2; i++) {\n        for (int j = 0; j < (n+1) / 2; j++) {\n            int temp             = matrix[i][j];\n            matrix[i][j]         = matrix[n-j-1][i];\n            matrix[n-j-1][i]     = matrix[n-i-1][n-j-1];\n            matrix[n-i-1][n-j-1] = matrix[j][n-i-1];\n            matrix[j][n-i-1]     = temp;\n        }\n    }\n}\n")),(0,a.kt)("h2",{id:"\u5b57\u7b26\u4e32"},"\u5b57\u7b26\u4e32"),(0,a.kt)("h3",{id:"\u53cd\u8f6c\u5b57\u7b26\u4e32"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/reverse-string/"},"\u53cd\u8f6c\u5b57\u7b26\u4e32")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public void reverseString(char[] s) {\n    for (int left=0, right=s.length-1; left < right; left++, right--) {\n        char temp = s[left];\n        s[left] = s[right];\n        s[right] = temp;\n    }\n}\n")),(0,a.kt)("h3",{id:"\u6574\u6570\u53cd\u8f6c"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/reverse-integer/"},"\u6574\u6570\u53cd\u8f6c")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public int reverse(int x) {\n    int rev = 0;\n    while (x != 0) {\n        if (rev < Integer.MIN_VALUE / 10 || rev > Integer.MAX_VALUE / 10) {\n            return 0;\n        }\n        int digit = x % 10;\n        x /= 10;\n        rev = rev * 10 + digit;\n    }\n    return rev;\n}\n")),(0,a.kt)("h3",{id:"\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u552f\u4e00\u5b57\u7b26"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/first-unique-character-in-a-string/"},"\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u552f\u4e00\u5b57\u7b26")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public int firstUniqChar(String s) {\n    Map<Character, Integer> position = new HashMap<>();\n    for (int i = 0; i < s.length(); i++) {\n        char ch = s.charAt(i);\n        if (position.containsKey(ch)) {\n            position.put(ch, -1);\n        } else {\n            position.put(ch, i);\n        }\n    }\n    int first = s.length();\n    for (Map.Entry<Character, Integer> entry : position.entrySet()) {\n        int pos = entry.getValue();\n        if (pos != -1 && pos < first) {\n            first = pos;\n        }\n    }\n    if (first == s.length()) {\n        first = -1;\n    }\n    return first;\n}\n")),(0,a.kt)("h3",{id:"\u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/valid-anagram/"},"\u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public boolean isAnagram(String s, String t) {\n    if (s.length() != t.length()) {\n        return false;\n    }\n    Map<Character, Integer> map = new HashMap<Character, Integer>();\n    for (int i = 0; i < s.length(); i++) {\n        char ch = s.charAt(i);\n        map.put(ch, map.getOrDefault(ch, 0) + 1);\n    }\n    for (int i = 0; i < t.length(); i++) {\n        char ch = t.charAt(i);\n        map.put(ch, map.getOrDefault(ch, 0) - 1);\n        if (map.get(ch) < 0) {\n            return false;\n        }\n    }\n    return true;\n}\n")),(0,a.kt)("h3",{id:"\u9a8c\u8bc1\u56de\u6587\u4e32"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/valid-palindrome/"},"\u9a8c\u8bc1\u56de\u6587\u4e32")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public boolean isPalindrome(String s) {\n    int left = 0;\n    int right = s.length() - 1;\n    while (left < right) {\n        while (left < right && !Character.isLetterOrDigit(s.charAt(left))) {\n            left++;\n        }\n        while (left < right && !Character.isLetterOrDigit(s.charAt(right))) {\n            right--;\n        }\n        if (left < right) {\n            if (Character.toLowerCase(s.charAt(left)) != Character.toLowerCase(s.charAt(right))) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n    }\n    return true;\n}\n")),(0,a.kt)("h3",{id:"\u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570"},"\u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570"),(0,a.kt)("h3",{id:"\u5b9e\u73b0strstr"},"\u5b9e\u73b0",(0,a.kt)("inlineCode",{parentName:"h3"},"strStr()")),(0,a.kt)("h3",{id:"\u5916\u89c2\u6570\u5217"},"\u5916\u89c2\u6570\u5217"),(0,a.kt)("h3",{id:"\u6700\u957f\u516c\u5171\u524d\u7f00"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/longest-common-prefix/"},"\u6700\u957f\u516c\u5171\u524d\u7f00")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode-cn.com/solution-static/14/14_fig2.png",alt:null})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public String longestCommonPrefix(String[] strs) {\n    if (strs == null || strs.length == 0) {\n        return "";\n    }\n    int count = strs.length;\n    int length = strs[0].length();\n    for (int i = 0; i < length; i++) {\n        char c = strs[0].charAt(i);\n        for (int j = 1; j < count; j++) {\n            if (i == strs[j].length() || strs[j].charAt(i) != c) {\n                return strs[0].substring(0, i);\n            }\n        }\n    }\n    return strs[0];\n}\n')),(0,a.kt)("h2",{id:"\u94fe\u8868"},"\u94fe\u8868"),(0,a.kt)("h3",{id:"\u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/shan-chu-lian-biao-de-jie-dian-lcof/"},"\u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public ListNode deleteNode(ListNode head, int val) {\n    ListNode dummy = new ListNode(0, head);\n    ListNode p = dummy;\n    while (p.next.val != val) {\n        p = p.next;\n    }\n    p.next = p.next.next;\n    return dummy.next;\n}\n")),(0,a.kt)("h3",{id:"\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c-n-\u4e2a\u8282\u70b9"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/shan-chu-lian-biao-de-jie-dian-lcof/"},"\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u8282\u70b9")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public ListNode removeNthFromEnd(ListNode head, int n) {\n    ListNode dummy = new ListNode(0, head);\n    Deque<ListNode> stack = new LinkedList<>();\n    ListNode curr = dummy;\n    while (curr != null) {\n        stack.push(curr);\n        curr = curr.next;\n    }\n    for (int i = 0; i < n; i++) {\n        stack.pop();\n    }\n    ListNode prev = stack.peek();\n    prev.next = prev.next.next;\n    return dummy.next;\n}\n")),(0,a.kt)("h3",{id:"\u53cd\u8f6c\u94fe\u8868"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/reverse-linked-list/"},"\u53cd\u8f6c\u94fe\u8868")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public ListNode reverseList(ListNode head) {\n    ListNode prev = null;\n    ListNode curr = head;\n    while (curr != null) {\n        ListNode next = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n}\n")),(0,a.kt)("h3",{id:"\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/merge-two-sorted-lists/"},"\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n    ListNode head = new ListNode(0);\n    ListNode prev = head;\n    while (l1 != null && l2 != null) {\n        if (l1.val <= l2.val) {\n            prev.next = l1;\n            l1 = l1.next;\n        } else {\n            prev.next = l2;\n            l2 = l2.next;\n        }\n        prev = prev.next;\n    }\n    prev.next = l1 == null ? l2 : l1;\n    return head.next;\n}\n")),(0,a.kt)("h3",{id:"\u56de\u6587\u94fe\u8868"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/palindrome-linked-list/"},"\u56de\u6587\u94fe\u8868")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"")),(0,a.kt)("h3",{id:"\u73af\u5f62\u94fe\u8868"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/linked-list-cycle/"},"\u73af\u5f62\u94fe\u8868")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public boolean hasCycle(ListNode head) {\n    if (head == null || head.next == null) {\n        return false;\n    }\n    ListNode slow = head;\n    ListNode fast = head.next;\n    while (slow != fast) {\n        if (fast == null || fast.next == null) {\n            return false;\n        }\n        slow = slow.next;\n        fast = fast.next.next;\n    }\n    return true;\n}\n")),(0,a.kt)("h2",{id:"\u6811"},"\u6811"),(0,a.kt)("h3",{id:"\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/"},"\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u7684\u6700\u5927\u6df1\u5ea6 ",(0,a.kt)("inlineCode",{parentName:"p"},"l")," \u548c ",(0,a.kt)("inlineCode",{parentName:"p"},"r"),"\uff0c\u90a3\u4e48\u8be5\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6\u5373\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"max(l,r)+1"),"\u3002")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public int maxDepth(TreeNode root) {\n    if (root == null) {\n        return 0;\n    } else {\n        int l = maxDepth(root.left);\n        int r = maxDepth(root.right);\n        return Math.max(l, r) + 1;\n    }\n}\n")),(0,a.kt)("h3",{id:"\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/validate-binary-search-tree/"},"\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public boolean isValidBST(TreeNode root) {\n    Deque<TreeNode> stack = new LinkedList<>();\n    double inorder = -Double.MAX_VALUE;\n    while (!stack.isEmpty() || root != null) {\n        while (root != null) {\n            stack.push(root);\n            root = root.left;\n        }\n        root = stack.pop();\n        if (root.val <= inorder) {\n            return false;\n        }\n        inorder = root.val;\n        root = root.right;\n    }\n    return true;\n}\n")),(0,a.kt)("h3",{id:"\u5bf9\u79f0\u4e8c\u53c9\u6811"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/symmetric-tree/"},"\u5bf9\u79f0\u4e8c\u53c9\u6811")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public boolean isSymmetric(TreeNode root) {\n    return check(root, root);\n}\npublic boolean check(TreeNode p, TreeNode q) {\n    if (p == null && q == null) {\n        return true;\n    }\n    if (p == null || q == null) {\n        return false;\n    }\n    return p.val == q.val && check(p.left, q.right) && check(p.right, q.left);\n}\n")),(0,a.kt)("h3",{id:"\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/"},"\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public List<List<Integer>> levelOrder(TreeNode root) {\n    List<List<Integer>> ret = new ArrayList<>();\n    if (root == null) {\n        return ret;\n    }\n    Queue<TreeNode> queue = new LinkedList<>();\n    queue.offer(root);\n    while (!queue.isEmpty()) {\n        List<Integer> level = new ArrayList<>();\n        int currentLevelSize = queue.size();\n        for (int i = 1; i <= currentLevelSize; i++) {\n            TreeNode node = queue.poll();\n            level.add(node.val);\n            if (node.left != null) {\n                queue.offer(node.left);\n            }\n            if (node.right != null) {\n                queue.offer(node.right);\n            }\n        }\n        ret.add(level);\n    }\n    return ret;\n}\n")),(0,a.kt)("h3",{id:"\u5c06\u6709\u5e8f\u6570\u7ec4\u8f6c\u5316\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/"},"\u5c06\u6709\u5e8f\u6570\u7ec4\u8f6c\u5316\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public TreeNode sortedArrayToBST(int[] nums) {\n    return helper(nums, 0, nums.length -1);\n}\npublic TreeNode helper(int[] nums, int left, int right) {\n    if (left > right) {\n        return null;\n    }\n    int mid = (left + right) / 2;\n    TreeNode root = new TreeNode(nums[mid]);\n    root.left = helper(nums, left, mid - 1);\n    root.right = helper(nums, mid + 1, right);\n    return root;\n}\n")),(0,a.kt)("h2",{id:"\u6392\u5e8f\u548c\u641c\u7d22"},"\u6392\u5e8f\u548c\u641c\u7d22"),(0,a.kt)("h3",{id:"\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4"},"\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public void merge(int[] nums1, int m, int[] nums2, int n) {\n    int p1 = m - 1;\n    int p2 = n - 1;\n    int tail = m + n - 1;\n    int curr;\n    while (p1 >= 0 || p2 >= 0) {\n        if (p1 == -1) {\n            curr = nums2[p2--];\n        } else if (p2 == -1) {\n            curr = nums1[p1--];\n        } else if (nums1[p1] > nums2[p2]) {\n            curr = nums1[p1--];\n        } else {\n            curr = nums2[p2--];\n        }\n        nums1[tail--] = curr;\n    }\n}\n")),(0,a.kt)("h3",{id:"\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c"},"\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c"),(0,a.kt)("h2",{id:"\u52a8\u6001\u89c4\u5212"},"\u52a8\u6001\u89c4\u5212"),(0,a.kt)("h3",{id:"\u722c\u697c\u68af"},"\u722c\u697c\u68af"),(0,a.kt)("h3",{id:"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a"},"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a"),(0,a.kt)("h3",{id:"\u6700\u5927\u5b50\u5e8f\u548c"},"\u6700\u5927\u5b50\u5e8f\u548c"),(0,a.kt)("h3",{id:"\u6253\u5bb6\u52ab\u820d"},"\u6253\u5bb6\u52ab\u820d"),(0,a.kt)("h2",{id:"\u8bbe\u8ba1\u95ee\u9898"},"\u8bbe\u8ba1\u95ee\u9898"),(0,a.kt)("h3",{id:"\u6253\u4e71\u6570\u7ec4"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/shuffle-an-array/"},"\u6253\u4e71\u6570\u7ec4")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    int[] nums;\n    int[] original;\n    public Solution(int[] nums) {\n        this.nums = nums;\n        this.original = new int[nums.length];\n        System.arraycopy(nums, 0, original, 0, nums.length);\n    }\n    public int[] reset() {\n        System.arraycopy(original, 0, nums, 0, nums.length);\n        return nums;\n    }\n    public int[] shuffle() {\n        Random random = new Random();\n        for (int i = 0; i < nums.length; ++i) {\n            int j = i + random.nextInt(nums.length - i);\n            int temp = nums[i];\n            nums[i] = nums[j];\n            nums[j] = temp;\n        }\n        return nums;\n    }\n}\n")),(0,a.kt)("h3",{id:"\u6700\u5c0f\u6808"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/min-stack/"},"\u6700\u5c0f\u6808")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class MinStack {\n    Deque<Integer> xStack;\n    Deque<Integer> minStack;\n    public MinStack() {\n        xStack = new LinkedList<Integer>();\n        minStack = new LinkedList<Integer>();\n        minStack.push(Integer.MAX_VALUE);\n    }\n    public void push(int x) {\n        xStack.push(x);\n        minStack.push(Math.min(minStack.peek(), x));\n    }\n    public void pop() {\n        xStack.pop();\n        minStack.pop();\n    }\n    public int top() {\n        return xStack.peek();\n    }\n    public int getMin() {\n        return minStack.peek();\n    }\n}\n")),(0,a.kt)("h2",{id:"\u6570\u5b66"},"\u6570\u5b66"),(0,a.kt)("h3",{id:"fizz-buzz"},"Fizz Buzz"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public List<String> fizzBuzz(int n) {\n    List<String> answer = new ArrayList<>();\n    for (int i = 1; i <= n; i++) {\n        String s = "";\n        if (i % 3 == 0) {\n            s += "Fizz";\n        }\n        if (i % 5 == 0) {\n            s += "Buzz";\n        }\n        if (s.length() == 0) {\n            s += i;\n        }\n        answer.add(s);\n    }\n    return answer;\n}\n')),(0,a.kt)("h3",{id:"\u8ba1\u6570\u8d28\u6570"},"\u8ba1\u6570\u8d28\u6570"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public int countPrimes(int n) {\n    int ans = 0;\n    for (int i = 2; i < n; i++) {\n        ans += isPrime(i) ? 1 : 0;\n    }\n    return ans;\n}\npublic boolean isPrime(int x) {\n    for (int i = 2; i * i <= x; i++) {\n        if (x % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n")),(0,a.kt)("h3",{id:"3-\u7684\u5e42"},"3 \u7684\u5e42"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u8bd5\u9664\u6cd5"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public boolean isPowerOfThree(int n) {\n    while (n != 0 && n % 3 == 0) {\n        n /= 3;\n    }\n    return n == 1;\n}\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u5224\u65ad\u662f\u5426\u4e3a\u6700\u5927 3 \u7684\u5e42\u7684\u7ea6\u6570"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public boolean isPowerOfThree(int n) {\n    return n > 0 && (int)Math.pow(3, 19) % n == 0;\n}\n")))),(0,a.kt)("h3",{id:"\u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570"},"\u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public int romanToInt(String s) {\n    Map<Character, Integer> symbolValues = new HashMap<Character, Integer>() {{\n        put('I', 1);\n        put('V', 5);\n        put('X', 10);\n        put('L', 50);\n        put('C', 100);\n        put('D', 500);\n        put('M', 1000);\n    }};\n    int ans = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int value = symbolValues.get(s.charAt(i));\n        if (i < s.length() - 1 && value < symbolValues.get(s.charAt(i + 1))) {\n            ans -= value;\n        } else {\n            ans += value;\n        }\n    }\n    return ans;\n}\n")),(0,a.kt)("h3",{id:"\u4f4d-1-\u7684\u4e2a\u6570"},"\u4f4d 1 \u7684\u4e2a\u6570"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public int hammingWeight(int n) {\n    int ret = 0;\n    while (n != 0) {\n        n &= n - 1;\n        ret++;\n    }\n    return ret;\n}\n")),(0,a.kt)("h2",{id:"\u5176\u5b83"},"\u5176\u5b83"),(0,a.kt)("h3",{id:"\u6c49\u660e\u8ddd\u79bb"},"\u6c49\u660e\u8ddd\u79bb"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public int hammingDistance(int x, int y) {\n    int s = x ^ y;\n    int ret = 0;\n    while (s != 0) {\n        s &= s - 1;\n        ret++;\n    }\n    return ret;\n}\n")),(0,a.kt)("h3",{id:"\u98a0\u5012\u4e8c\u8fdb\u5236\u4f4d"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/reverse-bits/"},"\u98a0\u5012\u4e8c\u8fdb\u5236\u4f4d")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"private static final int M1 = 0x55555555; // 01010101010101010101010101010101\nprivate static final int M2 = 0x33333333; // 00110011001100110011001100110011\nprivate static final int M4 = 0x0f0f0f0f; // 00001111000011110000111100001111\nprivate static final int M8 = 0x00ff00ff; // 00000000111111110000000011111111\n\npublic int reverseBits(int n) {\n    n = n >>> 1 & M1 | (n & M1) << 1;\n    n = n >>> 2 & M2 | (n & M2) << 2;\n    n = n >>> 4 & M4 | (n & M4) << 4;\n    n = n >>> 8 & M8 | (n & M8) << 8;\n    return n >>> 16 | n << 16;\n}\n")),(0,a.kt)("h3",{id:"\u6768\u8f89\u4e09\u89d2"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/pascals-triangle"},"\u6768\u8f89\u4e09\u89d2")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://pic.leetcode-cn.com/1626927345-DZmfxB-PascalTriangleAnimated2.gif",alt:null})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public List<List<Integer>> generate(int numRows) {\n    List<List<Integer>> ret = new ArrayList<>();\n    for (int i = 0; i < numRows; i++) {\n        List<Integer> row = new ArrayList<>();\n        for (int j = 0; j <= i; j++) {\n            if (j == 0 || j == i) {\n                row.add(1);\n            } else {\n                row.add(ret.get(i - 1).get(j - 1) + ret.get(i - 1).get(j));\n            }\n        }\n        ret.add(row);\n    }\n    return ret;\n}\n")),(0,a.kt)("h3",{id:"\u6709\u6548\u7684\u62ec\u53f7"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/valid-parentheses/"},"\u6709\u6548\u7684\u62ec\u53f7")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public boolean isValid(String a) {\n    if (s.length() % 2 == 1) {\n        return false;\n    }\n    Map<Character, Character> pairs = Map.of(')', '(', ']', '[', '}', '{');\n    Deque<Character> stack = new LinkedList<>();\n    for (int i = 0; i < s.length(); i++) {\n        char ch = s.charAt(i);\n        if (pairs.containsKey(ch)) {\n            if (stack.isEmpty() || stack.peek() != pairs.get(ch)) {\n                return false;\n            }\n            stack.pop();\n        }else {\n            stack.push(ch);\n        }\n    }\n    return stack.isEmpty();\n}\n")),(0,a.kt)("h3",{id:"\u7f3a\u5931\u6570\u5b57"},"\u7f3a\u5931\u6570\u5b57"))}c.isMDXComponent=!0}}]);